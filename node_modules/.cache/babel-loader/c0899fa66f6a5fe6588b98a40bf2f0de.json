{"ast":null,"code":"import _objectSpread from\"/Users/abdomostafa/Finance-Tracker/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/abdomostafa/Finance-Tracker/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/abdomostafa/Finance-Tracker/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from\"react\";import{db}from'../firebase/config';var useCollection=function useCollection(collection,_query,_orderBy){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),documents=_useState2[0],setDocuments=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];//! if we don't use a ref --> infinite loop in useEffect\n//! _query is an array and is \"different\" on every function call\nvar query=useRef(_query).current;var orderBy=useRef(_orderBy).current;useEffect(function(){var currentCollection=db.collection(collection);if(query){var _currentCollection;currentCollection=(_currentCollection=currentCollection).where.apply(_currentCollection,_toConsumableArray(query));}if(orderBy){var _currentCollection2;currentCollection=(_currentCollection2=currentCollection).orderBy.apply(_currentCollection2,_toConsumableArray(orderBy));}var unsubscribe=currentCollection.onSnapshot(function(snapshot){var results=[];snapshot.docs.forEach(function(doc){results.push(_objectSpread({id:doc.id},doc.data()));});setDocuments(results);setError(null);},function(error){console.log(error);setError('could not fetch the data');});//* unsubscribe on unmount\nreturn function(){return unsubscribe();};},[collection,query,orderBy]);return{documents:documents,error:error};};export default useCollection;","map":{"version":3,"sources":["/Users/abdomostafa/Finance-Tracker/frontend/src/hooks/useCollection.js"],"names":["useEffect","useState","useRef","db","useCollection","collection","_query","_orderBy","documents","setDocuments","error","setError","query","current","orderBy","currentCollection","where","unsubscribe","onSnapshot","snapshot","results","docs","forEach","doc","push","id","data","console","log"],"mappings":"6eAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,OAAQC,EAAR,KAAiB,oBAAjB,CAGA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,UAAD,CAAaC,MAAb,CAAqBC,QAArB,CAAkC,CACpD,cAAkCN,QAAQ,CAAC,EAAD,CAA1C,wCAAOO,SAAP,eAAkBC,YAAlB,eACA,eAA0BR,QAAQ,CAAC,IAAD,CAAlC,yCAAOS,KAAP,eAAcC,QAAd,eAEA;AACA;AACA,GAAMC,CAAAA,KAAK,CAAGV,MAAM,CAACI,MAAD,CAAN,CAAeO,OAA7B,CACA,GAAMC,CAAAA,OAAO,CAAGZ,MAAM,CAACK,QAAD,CAAN,CAAiBM,OAAjC,CAEAb,SAAS,CAAC,UAAM,CACZ,GAAIe,CAAAA,iBAAiB,CAAGZ,EAAE,CAACE,UAAH,CAAcA,UAAd,CAAxB,CAEA,GAAIO,KAAJ,CAAW,wBACTG,iBAAiB,CAAG,oBAAAA,iBAAiB,EAACC,KAAlB,6CAA2BJ,KAA3B,EAApB,CACD,CACD,GAAIE,OAAJ,CAAa,yBACXC,iBAAiB,CAAG,qBAAAA,iBAAiB,EAACD,OAAlB,8CAA6BA,OAA7B,EAApB,CACD,CAED,GAAMG,CAAAA,WAAW,CAAGF,iBAAiB,CAACG,UAAlB,CAA6B,SAACC,QAAD,CAAc,CAC7D,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACAD,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,SAAAC,GAAG,CAAI,CAC3BH,OAAO,CAACI,IAAR,gBAAcC,EAAE,CAAEF,GAAG,CAACE,EAAtB,EAA6BF,GAAG,CAACG,IAAJ,EAA7B,GACD,CAFD,EAIAjB,YAAY,CAACW,OAAD,CAAZ,CACAT,QAAQ,CAAC,IAAD,CAAR,CACD,CARmB,CAQjB,SAACD,KAAD,CAAW,CACViB,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EACAC,QAAQ,CAAC,0BAAD,CAAR,CACH,CAXmB,CAApB,CAaA;AACA,MAAO,kBAAMM,CAAAA,WAAW,EAAjB,EAAP,CACH,CAzBQ,CAyBP,CAACZ,UAAD,CAAYO,KAAZ,CAAkBE,OAAlB,CAzBO,CAAT,CA4BA,MAAO,CAAEN,SAAS,CAATA,SAAF,CAAaE,KAAK,CAALA,KAAb,CAAP,CACH,CAtCD,CAwCA,cAAeN,CAAAA,aAAf","sourcesContent":["import { useEffect, useState, useRef } from \"react\"\nimport {db} from '../firebase/config'\n\n\nconst useCollection = (collection, _query, _orderBy) => {\n    const [documents, setDocuments] = useState([])\n    const [error, setError] = useState(null)\n    \n    //! if we don't use a ref --> infinite loop in useEffect\n    //! _query is an array and is \"different\" on every function call\n    const query = useRef(_query).current\n    const orderBy = useRef(_orderBy).current\n  \n    useEffect(() => {\n        let currentCollection = db.collection(collection)\n\n        if (query) {\n          currentCollection = currentCollection.where(...query)\n        }\n        if (orderBy) {\n          currentCollection = currentCollection.orderBy(...orderBy)\n        }\n\n        const unsubscribe = currentCollection.onSnapshot((snapshot) => {\n          let results = []\n          snapshot.docs.forEach(doc => {\n            results.push({id: doc.id, ...doc.data()})\n          });\n\n          setDocuments(results)\n          setError(null)\n        }, (error) => {\n            console.log(error)\n            setError('could not fetch the data')\n        })\n          \n        //* unsubscribe on unmount\n        return () => unsubscribe()\n    },[collection,query,orderBy])\n    \n    \n    return { documents, error }\n}\n\nexport default useCollection"]},"metadata":{},"sourceType":"module"}