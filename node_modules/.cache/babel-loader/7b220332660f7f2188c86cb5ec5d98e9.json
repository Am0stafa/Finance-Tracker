{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useReducer, useEffect, useState } from 'react';\nimport { db, timestamp } from '../firebase/config'; //! this hook is used to do two things \n//& add new document to a collection \n//& remove document from a collection\n//! represents the response we get from firebase\n\nlet initialState = {\n  document: null,\n  isPending: false,\n  error: null,\n  success: null\n};\n\nconst firestoreReducer = (state, action) => {\n  switch (action.type) {\n    case 'IS_PENDING':\n      return {\n        isPending: true,\n        document: null,\n        success: false,\n        error: null\n      };\n\n    case 'ADDED_DOCUMENT':\n      return {\n        isPending: false,\n        document: action.payload,\n        success: true,\n        error: null\n      };\n\n    case 'DELETED_DOCUMENT':\n      return {\n        isPending: false,\n        document: null,\n        success: true,\n        error: null\n      };\n\n    case 'ERROR':\n      return {\n        isPending: false,\n        document: null,\n        success: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFirestore = collection => {\n  _s();\n\n  const [response, dispatch] = useReducer(firestoreReducer, initialState);\n  const [isCancelled, setIsCancelled] = useState(false); // collection ref\n\n  const ref = projectFirestore.collection(collection); // only dispatch is not cancelled\n\n  const dispatchIfNotCancelled = action => {\n    if (!isCancelled) {\n      dispatch(action);\n    }\n  }; // add a document\n\n\n  const addDocument = async doc => {\n    dispatch({\n      type: 'IS_PENDING'\n    });\n\n    try {\n      const createdAt = timestamp.fromDate(new Date());\n      const addedDocument = await ref.add({ ...doc,\n        createdAt\n      });\n      dispatchIfNotCancelled({\n        type: 'ADDED_DOCUMENT',\n        payload: addedDocument\n      });\n    } catch (err) {\n      dispatchIfNotCancelled({\n        type: 'ERROR',\n        payload: err.message\n      });\n    }\n  }; // delete a document\n\n\n  const deleteDocument = async id => {\n    dispatch({\n      type: 'IS_PENDING'\n    });\n\n    try {\n      await ref.doc(id).delete();\n      dispatchIfNotCancelled({\n        type: 'DELETED_DOCUMENT'\n      });\n    } catch (err) {\n      dispatchIfNotCancelled({\n        type: 'ERROR',\n        payload: 'could not delete'\n      });\n    }\n  };\n\n  useEffect(() => {\n    return () => setIsCancelled(true);\n  }, []);\n  return {\n    addDocument,\n    deleteDocument,\n    response\n  };\n};\n\n_s(useFirestore, \"9EVgiqay/R51d/Adc6OMNoHTwUQ=\");","map":{"version":3,"sources":["/Users/abdomostafa/Finance-Tracker/frontend/src/hooks/useFirestore.js"],"names":["createContext","useReducer","useEffect","useState","db","timestamp","initialState","document","isPending","error","success","firestoreReducer","state","action","type","payload","useFirestore","collection","response","dispatch","isCancelled","setIsCancelled","ref","projectFirestore","dispatchIfNotCancelled","addDocument","doc","createdAt","fromDate","Date","addedDocument","add","err","message","deleteDocument","id","delete"],"mappings":"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","sourcesContent":["import { createContext, useReducer, useEffect, useState } from 'react'\nimport {db,timestamp} from '../firebase/config'\n//! this hook is used to do two things \n//& add new document to a collection \n//& remove document from a collection\n\n//! represents the response we get from firebase\n\nlet initialState = {\n  document: null,\n  isPending: false,\n  error: null,\n  success: null\n}\n\nconst firestoreReducer = (state, action) => {\n  switch (action.type) {\n    case 'IS_PENDING':\n      return { isPending: true, document: null, success: false, error: null }\n    case 'ADDED_DOCUMENT':\n      return { isPending: false, document: action.payload, success: true, error: null }\n    case 'DELETED_DOCUMENT':\n      return { isPending: false, document: null, success: true, error: null }\n    case 'ERROR':\n      return { isPending: false, document: null, success: false, error: action.payload }\n    default:\n      return state\n  }\n}\n\nexport const useFirestore = (collection) => {\n  const [response, dispatch] = useReducer(firestoreReducer, initialState)\n  const [isCancelled, setIsCancelled] = useState(false)\n\n  // collection ref\n  const ref = projectFirestore.collection(collection)\n\n  // only dispatch is not cancelled\n  const dispatchIfNotCancelled = (action) => {\n    if (!isCancelled) {\n      dispatch(action)\n    }\n  }\n\n  // add a document\n  const addDocument = async (doc) => {\n    dispatch({ type: 'IS_PENDING' })\n\n    try {\n      const createdAt = timestamp.fromDate(new Date())\n      const addedDocument = await ref.add({ ...doc, createdAt })\n      dispatchIfNotCancelled({ type: 'ADDED_DOCUMENT', payload: addedDocument })\n    }\n    catch (err) {\n      dispatchIfNotCancelled({ type: 'ERROR', payload: err.message })\n    }\n  }\n\n  // delete a document\n  const deleteDocument = async (id) => {\n    dispatch({ type: 'IS_PENDING' })\n\n    try {\n      await ref.doc(id).delete()\n      dispatchIfNotCancelled({ type: 'DELETED_DOCUMENT' })\n    }\n    catch (err) {\n      dispatchIfNotCancelled({ type: 'ERROR', payload: 'could not delete' })\n    }\n  }\n\n  useEffect(() => {\n    return () => setIsCancelled(true)\n  }, [])\n\n  return { addDocument, deleteDocument, response }\n\n}"]},"metadata":{},"sourceType":"module"}