{"ast":null,"code":"var _jsxFileName = \"/Users/abdomostafa/Finance-Tracker/frontend/src/context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst init = {\n  user: null,\n  authIsReady: false,\n  name: ''\n};\nexport const authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    case 'AUTH_IS_READY':\n      return {\n        user: action.payload,\n        authIsReady: true\n      };\n\n    default:\n      return state;\n  }\n};\nexport const AuthContext = /*#__PURE__*/createContext(init);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(authReducer, init);\n  useEffect(() => {\n    //! this is a solution rather than using local storage to store the user\n    //& this context runs every time the page reloads as the state will be cleare\n    const unsub = auth.onAuthStateChange(user => {\n      dispatch({\n        type: 'AUTH_IS_READY',\n        payload: user\n      });\n      unsub();\n    });\n  }, []); // console.log('AuthContext state:', state)\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AuthProvider, \"YquxXpaYXhtnsNuiPuv3FYFB4bc=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/abdomostafa/Finance-Tracker/frontend/src/context/AuthContext.js"],"names":["createContext","useEffect","useReducer","init","user","authIsReady","name","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","dispatch","unsub","auth","onAuthStateChange"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,UAAnC,QAAoD,OAApD;;AAEA,MAAMC,IAAI,GAAE;AACRC,EAAAA,IAAI,EAAE,IADE;AAERC,EAAAA,WAAW,EAAE,KAFL;AAGRC,EAAAA,IAAI,EAAC;AAHG,CAAZ;AAMA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYJ,QAAAA,IAAI,EAAEK,MAAM,CAACE;AAAzB,OAAP;;AACF,SAAK,QAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYJ,QAAAA,IAAI,EAAE;AAAlB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO;AAAEA,QAAAA,IAAI,EAAEK,MAAM,CAACE,OAAf;AAAwBN,QAAAA,WAAW,EAAE;AAArC,OAAP;;AACF;AACE,aAAOG,KAAP;AARJ;AAUD,CAXI;AAaP,OAAO,MAAMI,WAAW,gBAAGZ,aAAa,CAACG,IAAD,CAAjC;AAEP,OAAO,MAAMU,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAAA;;AACtC,QAAM,CAACN,KAAD,EAAOO,QAAP,IAAmBb,UAAU,CAACK,WAAD,EAAaJ,IAAb,CAAnC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACb;AACA;AACA,UAAMe,KAAK,GAAGC,IAAI,CAACC,iBAAL,CAAwBd,IAAD,IAAQ;AAE1CW,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAEP;AAAlC,OAAD,CAAR;AACAY,MAAAA,KAAK;AAEP,KALa,CAAd;AAOF,GAVQ,EAUN,EAVM,CAAT,CAHsC,CAgBtC;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,EAAE,GAAGR,KAAL;AAAYO,MAAAA;AAAZ,KAA7B;AAAA,cACKD;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAvBM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useEffect, useReducer} from \"react\";\n\nconst init ={ \n    user: null,\n    authIsReady: false,\n    name:''\n}\n\nexport const authReducer = (state, action) => {\n    switch (action.type) {\n      case 'LOGIN':\n        return { ...state, user: action.payload }\n      case 'LOGOUT':\n        return { ...state, user: null }\n      case 'AUTH_IS_READY':\n        return { user: action.payload, authIsReady: true }\n      default:\n        return state\n    }\n  }\n\nexport const AuthContext = createContext(init);\n\nexport const AuthProvider = ({children})=>{\n    const [state,dispatch] = useReducer(authReducer,init)\n    \n    useEffect(() => {\n       //! this is a solution rather than using local storage to store the user\n       //& this context runs every time the page reloads as the state will be cleare\n       const unsub = auth.onAuthStateChange((user)=>{\n        \n          dispatch({ type: 'AUTH_IS_READY', payload: user })\n          unsub()\n        \n       }) \n       \n    }, []);\n    \n    \n    // console.log('AuthContext state:', state)\n    return (\n        <AuthContext.Provider value={{ ...state, dispatch }}>\n            {children}\n        </AuthContext.Provider>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}