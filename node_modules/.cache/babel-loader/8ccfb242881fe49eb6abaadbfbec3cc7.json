{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect, useState } from 'react';\nimport { db, timestamp } from '../firebase/config'; //! this hook is used to do two things \n//& add new document to a collection \n//& remove document from a collection\n//! represents the response we get from firebase\n\nlet initialState = {\n  document: null,\n  isPending: false,\n  error: null,\n  success: null\n};\n\nconst firestoreReducer = (state, action) => {\n  switch (action.type) {\n    case 'IS_PENDING':\n      return {\n        isPending: true,\n        document: null,\n        success: false,\n        error: null\n      };\n\n    case 'ADDED_DOCUMENT':\n      return {\n        isPending: false,\n        document: action.payload,\n        success: true,\n        error: null\n      };\n\n    case 'DELETED_DOCUMENT':\n      return {\n        isPending: false,\n        document: null,\n        success: true,\n        error: null\n      };\n\n    case 'ERROR':\n      return {\n        isPending: false,\n        document: null,\n        success: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useFirestore = (collection = 'null') => {\n  _s();\n\n  const [isCancelled, setIsCancelled] = useState(false);\n  const [response, dispatch] = useReducer(firestoreReducer, initialState); //! only dispatch is not cancelled\n\n  const dispatchIfNotCancelled = action => {\n    if (!isCancelled) {\n      dispatch(action);\n    }\n  }; //! get the collection\n\n\n  const currentCollection = db.collection(collection);\n\n  const addDocument = async data => {\n    dispatch({\n      type: 'IS_PENDING'\n    });\n\n    try {\n      const createdAt = timestamp.fromDate(new Date());\n      const addedDocument = await currentCollection.add({ ...data,\n        createdAt\n      });\n      dispatchIfNotCancelled({\n        type: 'ADDED_DOCUMENT',\n        payload: addedDocument\n      });\n    } catch (err) {\n      dispatchIfNotCancelled({\n        type: 'ERROR',\n        payload: err.message\n      });\n    }\n  };\n\n  const deleteDocument = async id => {\n    dispatch({\n      type: 'IS_PENDING'\n    });\n\n    try {\n      await ref.doc(id).delete();\n      dispatchIfNotCancelled({\n        type: 'DELETED_DOCUMENT'\n      });\n    } catch (err) {\n      dispatchIfNotCancelled({\n        type: 'ERROR',\n        payload: 'could not delete'\n      });\n    }\n  };\n\n  useEffect(() => {\n    return () => setIsCancelled(true);\n  }, []);\n  return {\n    addDocument,\n    deleteDocument,\n    response\n  };\n};\n\n_s(useFirestore, \"JkLu0ks7oANYJJ0KBYBBe5HvBDM=\");\n\nexport default useFirestore;","map":{"version":3,"sources":["/Users/abdomostafa/Finance-Tracker/frontend/src/hooks/useFirestore.js"],"names":["useReducer","useEffect","useState","db","timestamp","initialState","document","isPending","error","success","firestoreReducer","state","action","type","payload","useFirestore","collection","isCancelled","setIsCancelled","response","dispatch","dispatchIfNotCancelled","currentCollection","addDocument","data","createdAt","fromDate","Date","addedDocument","add","err","message","deleteDocument","id","ref","doc","delete"],"mappings":"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","sourcesContent":["import {  useReducer, useEffect, useState } from 'react'\nimport {db,timestamp} from '../firebase/config'\n//! this hook is used to do two things \n//& add new document to a collection \n//& remove document from a collection\n\n//! represents the response we get from firebase\nlet initialState = {\n    document: null,\n    isPending: false,\n    error: null,\n    success: null\n}\n  \nconst firestoreReducer = (state, action) => {\n    switch (action.type) {\n      case 'IS_PENDING':\n        return { isPending: true, document: null, success: false, error: null }\n      case 'ADDED_DOCUMENT':\n        return { isPending: false, document: action.payload, success: true, error: null }\n      case 'DELETED_DOCUMENT':\n        return { isPending: false, document: null, success: true, error: null }\n      case 'ERROR':\n        return { isPending: false, document: null, success: false, error: action.payload }\n      default:\n        return state\n    }\n  }\n\nconst useFirestore = (collection='null') => {\n    const [isCancelled, setIsCancelled] = useState(false)\n    const [response,dispatch] =  useReducer(firestoreReducer, initialState)\n    \n      //! only dispatch is not cancelled\n    const dispatchIfNotCancelled = (action) => {\n        if (!isCancelled) {\n          dispatch(action)\n        }\n    }\n    //! get the collection\n    const currentCollection = db.collection(collection)\n\n\n    \n    const addDocument = async (data) => {\n        dispatch({ type: 'IS_PENDING' })\n        try {\n            const createdAt = timestamp.fromDate(new Date())\n            const addedDocument = await currentCollection.add({...data,createdAt});\n            dispatchIfNotCancelled({ type: 'ADDED_DOCUMENT', payload: addedDocument })\n        } catch (err) {\n            dispatchIfNotCancelled({ type: 'ERROR', payload: err.message })\n        }\n    \n    }\n    \n    const deleteDocument = async (id) => {\n      dispatch({ type: 'IS_PENDING' })\n\ntry {\n  await ref.doc(id).delete()\n  dispatchIfNotCancelled({ type: 'DELETED_DOCUMENT' })\n}\ncatch (err) {\n  dispatchIfNotCancelled({ type: 'ERROR', payload: 'could not delete' })\n}\n    \n    }\n\n    useEffect(() => {\n        return () => setIsCancelled(true)\n    }, [])\n\n\n    return { addDocument, deleteDocument, response }\n\n}\n\nexport default useFirestore"]},"metadata":{},"sourceType":"module"}