{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { auth } from '../firebase/config';\nimport useAuthcontext from './useAuthcontext';\n\nconst useSignup = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [isCancelled, setIsCancelled] = useState(false);\n  const {\n    dispatch\n  } = useAuthcontext();\n\n  const signup = async (email, password, displayName) => {\n    setError(null); //^ reset the error each time we signup\n\n    setIsPending(true);\n\n    try {\n      const res = await auth.createUserWithEmailAndPassword(email, password);\n      cl;\n      dispatch({\n        type: 'LOGIN',\n        payload: res.user\n      });\n\n      if (!res) {\n        throw new Error('Failed to create a user');\n      } //! after creating the user we want to tap in that user and update his profile and add this name\n\n\n      await res.user.updateProfile({\n        displayName\n      });\n      if (!isCancelled) setIsPending(false);\n    } catch (err) {\n      console.log(error);\n      setError(err.message);\n      setIsPending(false);\n    }\n  };\n\n  useEffect(() => {\n    return () => setIsCancelled(false); //! if we navigate away this fire and we dont want to update the local state if this happens\n  }, []);\n  return {\n    error,\n    isPending,\n    signup\n  };\n};\n\n_s(useSignup, \"2FcRekVkC7UA9DKwazqiFsStiPo=\", false, function () {\n  return [useAuthcontext];\n});\n\nexport default useSignup;","map":{"version":3,"sources":["/Users/abdomostafa/Finance-Tracker/frontend/src/hooks/useSignup.js"],"names":["useEffect","useState","auth","useAuthcontext","useSignup","error","setError","isPending","setIsPending","isCancelled","setIsCancelled","dispatch","signup","email","password","displayName","res","createUserWithEmailAndPassword","cl","type","payload","user","Error","updateProfile","err","console","log","message"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAQC,IAAR,QAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBL,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACM,SAAD,EAAWC,YAAX,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAACU,IAAAA;AAAD,MAAaR,cAAc,EAAjC;;AAEA,QAAMS,MAAM,GAAG,OAAOC,KAAP,EAAaC,QAAb,EAAsBC,WAAtB,KAAsC;AACjDT,IAAAA,QAAQ,CAAC,IAAD,CAAR,CADiD,CAClC;;AACfE,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACA,YAAMQ,GAAG,GAAG,MAAMd,IAAI,CAACe,8BAAL,CAAoCJ,KAApC,EAA0CC,QAA1C,CAAlB;AACAI,MAAAA,EAAE;AACFP,MAAAA,QAAQ,CAAC;AAACQ,QAAAA,IAAI,EAAC,OAAN;AAAcC,QAAAA,OAAO,EAACJ,GAAG,CAACK;AAA1B,OAAD,CAAR;;AACA,UAAG,CAACL,GAAJ,EAAQ;AACJ,cAAM,IAAIM,KAAJ,CAAU,yBAAV,CAAN;AACH,OAND,CAOA;;;AACA,YAAMN,GAAG,CAACK,IAAJ,CAASE,aAAT,CAAuB;AAAER,QAAAA;AAAF,OAAvB,CAAN;AAEA,UAAI,CAACN,WAAL,EACKD,YAAY,CAAC,KAAD,CAAZ;AAGR,KAdD,CAcE,OAAOgB,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAZ;AACAC,MAAAA,QAAQ,CAACkB,GAAG,CAACG,OAAL,CAAR;AACAnB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH;AAEJ,GAzBD;;AA2BAR,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAMU,cAAc,CAAC,KAAD,CAA3B,CADY,CACuB;AACtC,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACL,IAAAA,KAAD;AAAOE,IAAAA,SAAP;AAAiBK,IAAAA;AAAjB,GAAP;AACH,CAvCD;;GAAMR,S;UAKiBD,c;;;AAoCvB,eAAeC,SAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport {auth} from '../firebase/config'\nimport useAuthcontext from './useAuthcontext'\n\nconst useSignup = () => {\n    const [error,setError] = useState(null)\n    const [isPending,setIsPending] = useState(false)\n    const [isCancelled, setIsCancelled] = useState(false)\n\n    const {dispatch} = useAuthcontext()\n    \n    const signup = async (email,password,displayName) => {\n        setError(null) //^ reset the error each time we signup\n        setIsPending(true)\n        \n        try {\n            const res = await auth.createUserWithEmailAndPassword(email,password) \n            cl\n            dispatch({type:'LOGIN',payload:res.user})\n            if(!res){\n                throw new Error('Failed to create a user')\n            }\n            //! after creating the user we want to tap in that user and update his profile and add this name\n            await res.user.updateProfile({ displayName })\n                    \n            if (!isCancelled)\n                 setIsPending(false)\n    \n            \n        } catch (err) {\n            console.log(error)\n            setError(err.message)\n            setIsPending(false)\n\n        }\n        \n    }\n    \n    useEffect(() => {    \n        return () => setIsCancelled(false) //! if we navigate away this fire and we dont want to update the local state if this happens\n    }, []);\n    \n    return {error,isPending,signup}\n}\n\nexport default useSignup"]},"metadata":{},"sourceType":"module"}