{"ast":null,"code":"import _slicedToArray from\"/Users/abdomostafa/Finance-Tracker/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/abdomostafa/Finance-Tracker/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createContext,useEffect,useReducer}from\"react\";import{auth}from'../firebase/config';import{jsx as _jsx}from\"react/jsx-runtime\";var init={user:null,authIsReady:false,name:''};export var authReducer=function authReducer(state,action){switch(action.type){case'LOGIN':return _objectSpread(_objectSpread({},state),{},{user:action.payload});case'LOGOUT':return _objectSpread(_objectSpread({},state),{},{user:null});case'AUTH_IS_READY':return{user:action.payload,authIsReady:true};default:return state;}};export var AuthContext=/*#__PURE__*/createContext(init);export var AuthProvider=function AuthProvider(_ref){var children=_ref.children;var _useReducer=useReducer(authReducer,init),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];useEffect(function(){//! this is a solution rather than using local storage to store the user\n//& this context runs every time the page reloads as the state will be cleared\n//^ so what happens here is each time this function will run to check if we have a user or no\n//? and we wont render anything till this evaluates\nvar unsub=auth.onAuthStateChanged(function(user){dispatch({type:'AUTH_IS_READY',payload:user});unsub();});},[]);// console.log('AuthContext state:', state)\nreturn/*#__PURE__*/_jsx(AuthContext.Provider,{value:_objectSpread(_objectSpread({},state),{},{dispatch:dispatch}),children:children});};","map":{"version":3,"sources":["/Users/abdomostafa/Finance-Tracker/frontend/src/context/AuthContext.js"],"names":["createContext","useEffect","useReducer","auth","init","user","authIsReady","name","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","dispatch","unsub","onAuthStateChanged"],"mappings":"mUAAA,OAASA,aAAT,CAAwBC,SAAxB,CAAmCC,UAAnC,KAAoD,OAApD,CACA,OAAQC,IAAR,KAAmB,oBAAnB,C,2CAEA,GAAMC,CAAAA,IAAI,CAAE,CACRC,IAAI,CAAE,IADE,CAERC,WAAW,CAAE,KAFL,CAGRC,IAAI,CAAC,EAHG,CAAZ,CAMA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CAC1C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,OAAL,CACE,sCAAYF,KAAZ,MAAmBJ,IAAI,CAAEK,MAAM,CAACE,OAAhC,GACF,IAAK,QAAL,CACE,sCAAYH,KAAZ,MAAmBJ,IAAI,CAAE,IAAzB,GACF,IAAK,eAAL,CACE,MAAO,CAAEA,IAAI,CAAEK,MAAM,CAACE,OAAf,CAAwBN,WAAW,CAAE,IAArC,CAAP,CACF,QACE,MAAOG,CAAAA,KAAP,CARJ,CAUH,CAXM,CAaP,MAAO,IAAMI,CAAAA,WAAW,cAAGb,aAAa,CAACI,IAAD,CAAjC,CAEP,MAAO,IAAMU,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAc,IAAZC,CAAAA,QAAY,MAAZA,QAAY,CACtC,gBAAyBb,UAAU,CAACM,WAAD,CAAaJ,IAAb,CAAnC,4CAAOK,KAAP,iBAAaO,QAAb,iBAEAf,SAAS,CAAC,UAAM,CACb;AACA;AACA;AACA;AACA,GAAMgB,CAAAA,KAAK,CAAGd,IAAI,CAACe,kBAAL,CAAwB,SAACb,IAAD,CAAQ,CAE3CW,QAAQ,CAAC,CAAEL,IAAI,CAAE,eAAR,CAAyBC,OAAO,CAAEP,IAAlC,CAAD,CAAR,CACAY,KAAK,GAEP,CALa,CAAd,CAOF,CAZQ,CAYN,EAZM,CAAT,CAeA;AACA,mBACI,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,gCAAOR,KAAP,MAAcO,QAAQ,CAARA,QAAd,EAA3B,UACKD,QADL,EADJ,CAMH,CAzBM","sourcesContent":["import { createContext, useEffect, useReducer} from \"react\";\nimport {auth} from '../firebase/config'\n\nconst init ={ \n    user: null,\n    authIsReady: false,\n    name:''\n}\n\nexport const authReducer = (state, action) => {\n    switch (action.type) {\n      case 'LOGIN':\n        return { ...state, user: action.payload }\n      case 'LOGOUT':\n        return { ...state, user: null }\n      case 'AUTH_IS_READY':\n        return { user: action.payload, authIsReady: true }\n      default:\n        return state\n    }\n}\n\nexport const AuthContext = createContext(init);\n\nexport const AuthProvider = ({children})=>{\n    const [state,dispatch] = useReducer(authReducer,init)\n    \n    useEffect(() => {\n       //! this is a solution rather than using local storage to store the user\n       //& this context runs every time the page reloads as the state will be cleared\n       //^ so what happens here is each time this function will run to check if we have a user or no\n       //? and we wont render anything till this evaluates\n       const unsub = auth.onAuthStateChanged((user)=>{\n        \n          dispatch({ type: 'AUTH_IS_READY', payload: user })\n          unsub()\n        \n       }) \n       \n    }, []);\n    \n    \n    // console.log('AuthContext state:', state)\n    return (\n        <AuthContext.Provider value={{ ...state, dispatch }}>\n            {children}\n        </AuthContext.Provider>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}